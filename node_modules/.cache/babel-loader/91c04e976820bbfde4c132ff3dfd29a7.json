{"ast":null,"code":"var _jsxFileName = \"/Users/petersun/Documents/Blockchain/Solona/buildspace/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport idl from './idl.json';\nimport './App.css'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3;\nlet baseAccount = Keypair.generate();\nconst programdID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\nconst opts = {\n  preflightCommitment: \"processed\"\n};\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]); // config\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  }; // Actions\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({});\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /*\r\n           * Set the user's publicKey in state to be used later!\r\n           */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programdID, provider);\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (e) {\n      console.log(\"getGifs.error\", e);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Gif List...');\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const connectWallet = async () => {};\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        sendGif();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif link!\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: gifList.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif,\n          alt: gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)\n      }, gif, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this); // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC GIF Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/petersun/Documents/Blockchain/Solona/buildspace/gif-portal-starter/src/App.js"],"names":["Connection","PublicKey","clusterApiUrl","Program","Provider","web3","React","useEffect","useState","idl","SystemProgram","Keypair","baseAccount","generate","programdID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","getProvider","connection","provider","window","solana","checkIfWalletIsConnected","isPhantom","console","log","response","connect","publicKey","toString","alert","error","sendGif","length","getGifList","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","account","fetch","e","onInputChange","event","value","target","connectWallet","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","gif","onLoad","addEventListener","removeEventListener","twitterLogo"],"mappings":"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","sourcesContent":["import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport React, { useEffect, useState } from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport idl from './idl.json';\r\nimport './App.css';\r\n\r\n\r\n// Constants\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\nlet baseAccount = Keypair.generate();\r\n\r\nconst programdID = new PublicKey(idl.metadata.address);\r\n\r\nconst network = clusterApiUrl('devnet');\r\n\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  // config\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    )\r\n\r\n    return provider;\r\n  }\r\n\r\n  // Actions\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('Phantom wallet found!');\r\n          const response = await solana.connect({ });\r\n          console.log(\r\n            'Connected with Public Key:',\r\n            response.publicKey.toString()\r\n          );\r\n\r\n          /*\r\n           * Set the user's publicKey in state to be used later!\r\n           */\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  \r\n  const sendGif = async () => {\r\n    if (inputValue.length > 0) {\r\n      console.log('Gif link:', inputValue);\r\n      setGifList([...gifList, inputValue]);\r\n      setInputValue('');\r\n    } else {\r\n      console.log('Empty input. Try again.');\r\n    }\r\n  };\r\n\r\n  const getGifList = async() => {\r\n    try{\r\n      const provider = getProvider();      \r\n      const program = new Program(idl, programdID, provider);\r\n\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n\r\n      console.log(\"Got the account\", account)\r\n      setGifList(account.gifList)\r\n    }catch(e) {\r\n      console.log(\"getGifs.error\", e);\r\n      setGifList(null);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching Gif List...');\r\n      getGifList()\r\n    }\r\n  }, [walletAddress])\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const connectWallet = async () => {};\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const renderConnectedContainer = () => (\r\n    <div className=\"connected-container\">\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          sendGif();\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter gif link!\"\r\n          value={inputValue}\r\n          onChange={onInputChange}\r\n        />\r\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n      <div className=\"gif-grid\">\r\n        {/* Map through gifList instead of TEST_GIFS */}\r\n        {gifList.map((gif) => (\r\n          <div className=\"gif-item\" key={gif}>\r\n            <img src={gif} alt={gif} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n\t\t\t{/* This was solely added for some styling fanciness */}\r\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your GIF collection in the metaverse âœ¨\r\n          </p>\r\n          {/* Add the condition to show this only if we don't have a wallet address */}\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}