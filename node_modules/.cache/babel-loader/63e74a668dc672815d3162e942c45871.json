{"ast":null,"code":"var _jsxFileName = \"/Users/petersun/Documents/Blockchain/Solona/buildspace/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport idl from './idl.json';\nimport './App.css';\nimport kp from './keypair.json'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3;\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconsole.log('secret', secret);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\nconst opts = {\n  preflightCommitment: \"processed\"\n};\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]); // config\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  }; // Actions\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({});\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /*\r\n           * Set the user's publicKey in state to be used later!\r\n           */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log('No gif link given!:');\n      return;\n    }\n\n    setInputValue('');\n    console.log('Gif link', inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"GiF successfully sent to program\", inputValue);\n      await getGifList();\n    } catch (e) {\n      console.log('err.sending gif', e);\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.accounts.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const voteGif = gifLink => async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.updateItem(gifLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      await getGifList();\n    } catch (e) {}\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Gif List...');\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const connectWallet = async () => {};\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this);\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendGif();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter gif link!\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: `${item.userAddress.toString()} : ${item.votes}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              onClick: voteGif(item.gifLink),\n              children: \"VOTE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this);\n    }\n  }; // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC GIF Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/petersun/Documents/Blockchain/Solona/buildspace/gif-portal-starter/src/App.js"],"names":["Connection","PublicKey","clusterApiUrl","Program","Provider","web3","React","useEffect","useState","idl","kp","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","console","log","baseAccount","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","getProvider","connection","provider","window","solana","checkIfWalletIsConnected","isPhantom","response","connect","publicKey","toString","alert","error","sendGif","length","program","rpc","addGif","accounts","user","wallet","getGifList","e","createGifAccount","startStuffOff","systemProgram","programId","signers","account","fetch","voteGif","gifLink","updateItem","onInputChange","event","value","target","connectWallet","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","item","index","userAddress","votes","onLoad","addEventListener","removeEventListener","twitterLogo"],"mappings":"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","sourcesContent":["import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, Provider, web3 } from '@project-serum/anchor';\r\nimport React, { useEffect, useState } from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport idl from './idl.json';\r\nimport './App.css';\r\nimport kp from './keypair.json'\r\n\r\n\r\n// Constants\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secret = new Uint8Array(arr)\r\n\r\nconsole.log('secret', secret);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\r\n\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\nconst network = clusterApiUrl('devnet');\r\n\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  // config\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    )\r\n\r\n    return provider;\r\n  }\r\n\r\n  // Actions\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('Phantom wallet found!');\r\n          const response = await solana.connect({ });\r\n          console.log(\r\n            'Connected with Public Key:',\r\n            response.publicKey.toString()\r\n          );\r\n\r\n          /*\r\n           * Set the user's publicKey in state to be used later!\r\n           */\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  \r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log('No gif link given!:');\r\n      return\r\n    } \r\n    setInputValue('');\r\n\r\n    console.log('Gif link', inputValue);\r\n\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        }\r\n      })\r\n      console.log(\"GiF successfully sent to program\", inputValue);\r\n\r\n      await getGifList();\r\n    }catch (e) {\r\n      console.log('err.sending gif', e);\r\n    }\r\n  };\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\r\n      await getGifList();\r\n  \r\n    } catch(error) {\r\n      console.log(\"Error creating BaseAccount account:\", error)\r\n    }\r\n  }\r\n  \r\n  const getGifList = async() => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.accounts.baseAccount.fetch(baseAccount.publicKey);\r\n      \r\n      console.log(\"Got the account\", account)\r\n      setGifList(account.gifList)\r\n  \r\n    } catch (error) {\r\n      console.log(\"Error in getGifList: \", error)\r\n      setGifList(null);\r\n    }\r\n  }\r\n\r\n  const voteGif = (gifLink) => async() => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.updateItem(gifLink, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,          \r\n        }        \r\n      });      \r\n      await getGifList();\r\n    }catch (e) {\r\n\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching Gif List...');\r\n      getGifList()\r\n    }\r\n  }, [walletAddress])\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const connectWallet = async () => {};\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const renderConnectedContainer = () => {\r\n    // If we hit this, it means the program account hasn't been initialized.\r\n      if (gifList === null) {\r\n        return (\r\n          <div className=\"connected-container\">\r\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\r\n              Do One-Time Initialization For GIF Program Account\r\n            </button>\r\n          </div>\r\n        )\r\n      } \r\n      // Otherwise, we're good! Account exists. User can submit GIFs.\r\n      else {\r\n        return(\r\n          <div className=\"connected-container\">\r\n            <form\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n                sendGif();\r\n              }}\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter gif link!\"\r\n                value={inputValue}\r\n                onChange={onInputChange}\r\n              />\r\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n                Submit\r\n              </button>\r\n            </form>\r\n            <div className=\"gif-grid\">\r\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\r\n              {gifList.map((item, index) => (\r\n                <div className=\"gif-item\" key={index}>\r\n                  <img src={item.gifLink} />\r\n                  <div>\r\n                    {`${item.userAddress.toString()} : ${item.votes}`}\r\n                  </div>\r\n\r\n                  <a onClick={voteGif(item.gifLink)}>VOTE</a>\r\n                  \r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n\t\t\t{/* This was solely added for some styling fanciness */}\r\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your GIF collection in the metaverse âœ¨\r\n          </p>\r\n          {/* Add the condition to show this only if we don't have a wallet address */}\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n          {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}